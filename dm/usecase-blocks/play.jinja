{% set inboundRoutes = [] %}
{% set outboundRoutes = [] %}
{% set publicAddresses = [] %}
{% set fgtConfig = "" %}

{% set prefix = properties.prefix | default(env.deployment) %}

resources:
- name: n-s_scanning
  type: usecase-ingress.jinja
  properties:
    publicAddresses:
    - name: serv1
      backendFqdn: a.b.com
      extport: 80
      mappedport: 8080
{% set fgtConfig = fwConfig ~ '\n$(ref.n-s_scanning.fwConfig)'%}

- name: Sample_VPCs
  type: utils-sample-vpcs.jinja
  properties:
    prefix: {{prefix}}
    region: {{properties.region}}

- name: FGT-HA-AP
  type: fgcp-ha-ap-multilb.jinja
  properties:
    prefix: {{prefix}}
    zones:
    - {{properties.region}}-b
    - {{properties.region}}-c
    instanceType: e2-standard-4 #optional. defaults to e2-standard-4
    license: #optional. default: payg
      type: byol
# Uncomment the lics section below to refer to your own BYOL licenses

    serialPortEnable: false
    networks:
    # Replace vpcLink, subnetLink URLs and adapt ipCidrRange CIDRs for all networks
    # in this section if reusing this configuration with your existing VPCs
    - name: untrust-vpc
      vpcLink: $(ref.{{prefix}}-external-vpc.selfLink)
      subnetLink: $(ref.{{prefix}}-external-sb.selfLink)
      ipCidrRange: 172.20.0.0/24
      serviceIPs:
      - name: serv1
    - name: trust-vpc
      vpcLink: $(ref.{{prefix}}-internal-vpc.selfLink)
      subnetLink: $(ref.{{prefix}}-internal-sb.selfLink)
      ipCidrRange: 172.20.1.0/24
    - name: hasync
      vpcLink: $(ref.{{prefix}}-hasync-vpc.selfLink)
      subnetLink: $(ref.{{prefix}}-hasync-sb.selfLink)
      ipCidrRange: 172.20.2.0/24
    - name: management
      vpcLink: $(ref.{{prefix}}-mgmt-vpc.selfLink)
      subnetLink: $(ref.{{prefix}}-mgmt-sb.selfLink)
      ipCidrRange: 172.20.3.0/24
      externalIP:
        name: mgmt
    fwConfig: |
      {{fwConfig | indent(11) }}

{#}
- name: Secure_NAT
  type: usecase-secure-nat.jinja
  properties:
    defaultNat: $(ref.my-eip.selfLink)

- name: Segmentation
  type: usecase-segmentation.jinja
  properties:
    hub:
    spokes:
{#}


outputs:
- name: publicAddresses
  value: {{publicAddresses}}
